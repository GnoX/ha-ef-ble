syntax = "proto2";

package pd303;

enum POWER_STA {
  LOAD_CH_EG_POWER = 0;
  LOAD_CH_ES_POWER = 1;
  LOAD_CH_OIL_POWER = 2;
  LOAD_CH_STOP_EM = 3;
  LOAD_CH_OFF_POWER = 4;
}

enum LOAD_CH_STA {
  LOAD_CH_POWER_OFF = 0;
  LOAD_CH_POWER_ON = 1;
  LOAD_CH_EM_STOP = 2;
  LOAD_CH_UNKNOWN_STA = 4;
}

enum BACKUP_CH_STA {
  BACKUP_CH_OFF = 0;
  BACKUP_CH_DISCHARGE = 1;
  BACKUP_CH_CHARGE = 2;
  BACKUP_CH_EM_STOP = 3;
  BACKUP_CH_STANDBY = 4;
}

enum CTRL_MODE {
  RLY_AUTO_CTRL_MODE = 0;
  RLY_HAND_CTRL_MODE = 1;
  RLY_FAILURE_CTRL_MODE = 2;
}

enum FORCE_CHARGE_STA {
  FORCE_CHARGE_OFF = 0;
  FORCE_CHARGE_ON = 1;
}

enum PRODUCT_TYPE {
  GRID_OFF_LOAD12 = 0;
  GRID_CONNECTED_LOAD12 = 1;
  GRID_OFF_LOAD36 = 2;
  GRID_CONNECTED_LOAD36 = 3;
}

enum PRODUCT_MODE {
  GRID_OFF_MODE = 0;
  GRID_CONNECTED_MODE = 1;
}

enum GRID_STATUS {
  GRID_ON_STA = 0;
  GRID_OFF_STA = 1;
  GRID_PHASE_ERR_STA = 2;
  GRID_VOLT_ERR_STA = 3;
  GRID_FREQ_ERR_STA = 4;
  NONE_STA = 5;
}

enum OIL_POWER_STA {
  LOAD_CH_NOT_OIL_POWER = 0;
  LOAD_CH_SP_OIL_POWER = 1;
  LOAD_CH_OP_OIL_L1_POWER = 2;
  LOAD_CH_P_OIL_L2_POWER = 3;
}

enum STRATEGY_TIME_MODE {
  STARTEGY_EVERY_DAY = 0;
  STARTEGY_EVERY_WEEK = 1;
  STARTEGY_EVERY_MONTH = 2;
  STARTEGY_SPECIFY_DATE = 3;
}

enum TIME_TASK_TYPE_LIST {
  NONE_TIME_TASK = 0;
  CHARGE_TIME_TASK = 1;
  DISCHARGE_TIME_TASK = 2;
}

message RtcHalData {
  optional uint32 week = 1;
  optional uint32 sec = 2;
  optional uint32 min = 3;
  optional uint32 hour = 4;
  optional uint32 day = 5;
  optional uint32 month = 6;
  optional uint32 year = 7;
}

message ModelInfo {
  optional string sn = 1;
}

message ErrCode {
  repeated bytes err_code = 1;
}

message BackupEnergyTimeInfo {
  optional uint32 charge_time = 1;
  optional uint32 discharge_time = 2;
}

message MasterTimeInfo {
  optional float grid_watt = 1;
  optional sint32 sys_timezone = 2;
  optional uint32 time_type = 3;
  optional string timezone_id = 4;
}

message LoadTimeInfo {
  repeated float hall1_watt = 1;
  repeated float hall1_curr = 2;
}

message BackupTimeInfo {
  repeated float ch_watt = 1;
  optional uint32 backup_discharge_time = 2;
  optional .pd303.BackupEnergyTimeInfo energy_1 = 20;
  optional .pd303.BackupEnergyTimeInfo energy_2 = 21;
  optional .pd303.BackupEnergyTimeInfo energy_3 = 22;
}

message WattTimeInfo {
  optional float grid_watt = 1;
  repeated float ch_watt = 11;
  optional float all_hall_watt = 21;
}

message MasterVerTimeInfo {
  optional uint32 app_main_ver = 1;
  optional uint32 app_sub_ver = 2;
  optional uint32 app_dbg_ver = 3;
  optional uint32 app_test_ver = 4;
}

message MasterIncreInfo {
  optional .pd303.ErrCode errcode = 1;
  optional uint32 grid_sta = 2;
  optional uint32 grid_vol = 3;
  optional uint32 master_rly1_cnt = 4;
  optional uint32 master_rly2_cnt = 5;
  optional uint32 master_rly3_cnt = 6;
  optional uint32 master_rly4_cnt = 7;
  optional uint32 master_rly_err_flg = 16;
  optional float backup_vol_L1_safe_data = 30;
  optional float backup_vol_L2_safe_data = 31;
  optional uint32 backup_phase_diff_safe_data = 32;
  optional float load_vol_L1_safe_data = 33;
  optional float load_vol_L2_safe_data = 34;
  optional uint32 load_phase_diff_safe_data = 35;
  optional float master_vol_L1_safe_data = 36;
  optional float master_vol_L2_safe_data = 37;
  optional uint32 master_phase_diff_safe_data = 38;
}

message LoadSplitPhaseCfg {
  optional bool link_mark = 1;
  optional uint32 link_ch = 2;
}

message LoadChInfo {
  optional .pd303.LoadSplitPhaseCfg splitphase = 1;
  optional uint32 set_amp = 2;
  optional uint32 icon_num = 3;
  optional string ch_name = 4;
  optional uint32 load_rly_cnt = 5;
  optional float history_ch_watt_max = 6;
  optional .pd303.LOAD_CH_STA load_sta = 7;
  optional .pd303.CTRL_MODE ctrl_mode = 8;
}

message LoadChSta {
  optional .pd303.LOAD_CH_STA load_sta = 1;
  optional .pd303.CTRL_MODE ctrl_mode = 2;
  optional uint32 notice_set_time = 3;
  optional bool notice_enble = 4;
  optional uint32 notice_action = 5;
  optional uint32 load_rly_cnt = 6;
  optional float history_ch_watt_max = 7;
  optional uint32 load_ch_switch_cause = 8;
}

message HallIncreInfo {
  optional .pd303.ErrCode errcode = 1;
  optional .pd303.ModelInfo model_info = 2;
  optional uint32 mid_prority_discharge_time = 3;
  optional uint32 high_prority_discharge_time = 4;
  optional .pd303.LoadChInfo ch1_info = 30;
  optional .pd303.LoadChInfo ch2_info = 31;
  optional .pd303.LoadChInfo ch3_info = 32;
  optional .pd303.LoadChInfo ch4_info = 33;
  optional .pd303.LoadChInfo ch5_info = 34;
  optional .pd303.LoadChInfo ch6_info = 35;
  optional .pd303.LoadChInfo ch7_info = 36;
  optional .pd303.LoadChInfo ch8_info = 37;
  optional .pd303.LoadChInfo ch9_info = 38;
  optional .pd303.LoadChInfo ch10_info = 39;
  optional .pd303.LoadChInfo ch11_info = 40;
  optional .pd303.LoadChInfo ch12_info = 41;
  optional .pd303.LoadChSta ch1_sta = 90;
  optional .pd303.LoadChSta ch2_sta = 91;
  optional .pd303.LoadChSta ch3_sta = 92;
  optional .pd303.LoadChSta ch4_sta = 93;
  optional .pd303.LoadChSta ch5_sta = 94;
  optional .pd303.LoadChSta ch6_sta = 95;
  optional .pd303.LoadChSta ch7_sta = 96;
  optional .pd303.LoadChSta ch8_sta = 97;
  optional .pd303.LoadChSta ch9_sta = 98;
  optional .pd303.LoadChSta ch10_sta = 99;
  optional .pd303.LoadChSta ch11_sta = 100;
  optional .pd303.LoadChSta ch12_sta = 101;
}

message LoadIncreInfo {
  optional .pd303.HallIncreInfo hall1_incre_info = 1;
}

message BackupEnergyIncreDevInfo {
  optional .pd303.ModelInfo model_info = 1;
  optional uint32 type = 2;
  optional uint32 full_cap = 3;
  optional float rate_power = 4;
}

message BackupEnergyIncreInfo {
  optional .pd303.BackupEnergyIncreDevInfo dev_info = 1;
  optional uint32 is_enable = 2;
  optional uint32 is_connect = 3;
  optional uint32 is_ac_open = 4;
  optional uint32 is_power_output = 5;
  optional uint32 is_grid_charge = 6;
  optional uint32 is_mppt_charge = 7;
  optional uint32 battery_percentage = 8;
  optional float output_power = 9;
  optional uint32 oil_pack_num = 10;
  optional uint32 mult_pack_num = 11;
  optional uint32 ems_chg_flag = 12;
  optional uint32 hw_connect = 13;
  optional uint32 ems_bat_temp = 14;
  optional uint32 lcd_input_watts = 15;
  optional uint32 pv_charge_watts = 16;
  optional uint32 pv_low_charge_watts = 17;
  optional uint32 pv_height_charge_watts = 18;
  optional uint32 error_code_num = 19;
}

message BackupChannelInfo {
  optional bool backup_is_ready = 1;
  optional .pd303.BACKUP_CH_STA ctrl_sta = 2;
  optional .pd303.FORCE_CHARGE_STA force_charge_sta = 3;
  optional uint32 backup_rly1_cnt = 4;
  optional uint32 backup_rly2_cnt = 5;
  optional uint32 wake_up_charge_sta = 6;
  optional uint32 energy_5p8_type = 7;
}

message ProBackupEnergyIncreInfo {
  optional .pd303.ModelInfo model_info = 1;
  optional uint32 is_connect = 2;
  optional uint32 battery_soc = 3;
  optional uint32 full_cap = 4;
  optional float rate_power = 5;
  optional uint32 is_ac_open = 6;
  optional float output_power = 7;
  optional uint32 ems_bat_temp = 8;
  optional uint32 lcd_input_watts = 9;
  optional uint32 pv_insert_state = 10;
  optional uint32 pv_low_charge_watts = 11;
  optional uint32 charge_time = 12;
  optional uint32 discharge_time = 13;
  optional uint32 error_code_num = 14;
}

message BackupIncreInfo {
  optional .pd303.ErrCode errcode = 1;
  optional uint32 backup_full_cap = 2;
  optional uint32 backup_bat_per = 3;
  optional float backup_discharge_rmain_bat_cap = 4;
  optional float cur_discharge_soc = 5;
  optional .pd303.BackupChannelInfo ch1_info = 60;
  optional .pd303.BackupChannelInfo ch2_info = 61;
  optional .pd303.BackupChannelInfo ch3_info = 62;
  optional .pd303.BackupEnergyIncreInfo Energy1_info = 80;
  optional .pd303.BackupEnergyIncreInfo Energy2_info = 81;
  optional .pd303.BackupEnergyIncreInfo Energy3_info = 82;
  optional .pd303.ProBackupEnergyIncreInfo Delta_pro1_info = 90;
  optional .pd303.ProBackupEnergyIncreInfo Delta_pro2_info = 91;
}

message StrategyChInfo {
  optional bool load_is_enable = 1;
  optional uint32 load_priority = 2;
  optional uint32 load_priority_type = 3;
}

message EmergencyStrategy {
  optional uint32 is_cfg = 1;
  optional uint32 backup_mode = 2;
  optional uint32 overload_mode = 3;
  optional uint32 mid_priority_ch_discharge_low = 4;
  repeated .pd303.StrategyChInfo hall1_ch_info = 5;
  optional bool is_enable = 7;
}

message TimeRangeStrategy {
  optional bool is_cfg = 1;
  optional bool is_enable = 2;
  optional .pd303.STRATEGY_TIME_MODE time_mode = 3;
  optional uint32 time_data = 4;
  optional .pd303.RtcHalData start_time = 5;
  optional .pd303.RtcHalData stop_time = 6;
}

message TimeScaleSta {
  repeated bytes sta = 1;
}

message TimeTaskComCfg {
  optional bool is_cfg = 1;
  optional bool is_enable = 2;
  optional .pd303.TIME_TASK_TYPE_LIST type = 3;
  optional .pd303.RtcHalData set_time = 4;
  optional .pd303.TimeRangeStrategy time_range = 5;
  optional .pd303.TimeScaleSta time_scale = 6;
}

message BackupChargeCfg {
  optional bool is_allow = 1;
  optional uint32 charge_watt = 2;
  optional uint32 low_soc = 3;
  optional uint32 hight_soc = 4;
  optional uint32 backup_reserve_enable = 5;
  optional uint32 backup_reserve_soc = 6;
}

message BackupDischargeCfg {
  optional bool is_allow = 1;
  optional uint32 discharge_watt = 2;
  optional uint32 low_soc = 3;
  optional uint32 backup_soc = 4;
}

message ChargeTimeCfg {
  optional uint32 ch_charge_watt = 1;
  optional uint32 low_battery = 2;
  optional uint32 hight_battery = 3;
  repeated .pd303.StrategyChInfo backup_ch_info = 4;
}

message DischargeTimeCfg {
  optional uint32 mid_priority_ch_discharge_low = 1;
  repeated .pd303.StrategyChInfo hall1_ch_info = 2;
}

message TimeTaskCfg {
  optional .pd303.TimeTaskComCfg com_cfg = 1;
  optional .pd303.ChargeTimeCfg charge_cfg = 2;
  optional .pd303.DischargeTimeCfg discharge_cfg = 3;
}

message ProtoTime {
  optional .pd303.MasterTimeInfo master_info = 1;
  optional .pd303.LoadTimeInfo load_info = 2;
  optional .pd303.BackupTimeInfo backup_info = 3;
  optional .pd303.WattTimeInfo watt_info = 4;
  optional .pd303.MasterVerTimeInfo master_ver_info = 5;
}

message SysEventRecordItem {
  optional uint32 sys_ms = 1;
  optional uint32 timestamp = 2;
  optional uint32 event_no = 3;
  optional uint32 dur_time = 4;
}

message SysEventRecordReport {
  optional uint32 event_seq = 1;
  repeated .pd303.SysEventRecordItem event_report = 2;
}

message SysEventInfoReportAck {
  optional uint32 event_seq = 1;
  optional uint32 event_item_num = 2;
}

message TouData {
  repeated bytes tou_char_dischar_data = 1;
}

message ProtoPushAndSet {
  optional uint32 grid_vol = 1;
  optional uint32 grid_freq = 2;
  optional .pd303.PRODUCT_TYPE product_tpye = 3;
  optional bool eps_mode_info = 5;
  optional uint32 foce_charge_hight = 6;
  optional uint32 charge_watt_power = 7;
  optional uint32 disc_lower = 8;
  optional .pd303.POWER_STA power_sta = 9;
  optional uint32 master_cur = 10;
  optional bool is_set_oil_engine = 11;
  optional uint32 oil_engine_watt = 12;
  optional bool is_get_cfg_flag = 14;
  optional bool has_config_done = 15;
  optional bool is_area_err = 16;
  optional string area = 17;
  optional .pd303.FORCE_CHARGE_STA ch1_force_charge = 18;
  optional .pd303.FORCE_CHARGE_STA ch2_force_charge = 19;
  optional .pd303.FORCE_CHARGE_STA ch3_force_charge = 20;
  optional bool storm_is_enable = 21;
  optional uint32 storm_end_timestamp = 22;
  optional bool in_storm_mode = 23;
  optional uint32 ch1_enable_set = 24;
  optional uint32 ch2_enable_set = 25;
  optional uint32 ch3_enable_set = 26;
  optional uint32 oil_engine_to_back_charge_persent = 27;
  optional uint32 clear_ntc_over_temp_err = 28;
  optional .pd303.EmergencyStrategy LoadStrategyCfg = 30;
  optional .pd303.TimeTaskCfg TimeTaskCfg_1 = 31;
  optional .pd303.TimeTaskCfg TimeTaskCfg_2 = 32;
  optional .pd303.TimeTaskCfg TimeTaskCfg_3 = 33;
  optional .pd303.TimeTaskCfg TimeTaskCfg_4 = 34;
  optional .pd303.TimeTaskCfg TimeTaskCfg_5 = 35;
  optional .pd303.TimeTaskCfg TimeTaskCfg_6 = 36;
  optional .pd303.TimeTaskCfg TimeTaskCfg_7 = 37;
  optional .pd303.TimeTaskCfg TimeTaskCfg_8 = 38;
  optional .pd303.TimeTaskCfg TimeTaskCfg_9 = 39;
  optional .pd303.TimeTaskCfg TimeTaskCfg_10 = 40;
  optional uint32 ntc_over_temp_err = 41;
  optional uint32 smart_backup_mode = 61;
  optional uint32 backup_reserve_enable = 62;
  optional uint32 backup_reserve_soc = 63;
  optional uint32 localTime = 64;
  optional .pd303.TouData toudata = 65;
  optional float time_zone = 66;
  optional uint32 solar_backup_reserve_soc = 67;
  optional uint32 oil_type = 70;
  optional uint32 oil_max_output_watt = 71;
  optional .pd303.BackupIncreInfo backup_incre_info = 80;
  optional .pd303.LoadIncreInfo load_incre_info = 81;
  optional .pd303.MasterIncreInfo master_incre_info = 82;
  optional uint32 storm_request_flag = 90;
  optional uint32 storm_cur_time_stop_flag = 91;
  optional uint32 sys_cur_running_state = 92;
  optional uint32 rly1_real_sta = 93;
  optional uint32 rly2_real_sta = 94;
  optional uint32 rly3_real_sta = 95;
  optional uint32 rly4_real_sta = 96;
  optional uint32 cur_running_strategy = 97;
  optional uint32 reason_of_stop_dischar = 98;
  optional uint32 reason_os_stop_charge = 99;
  optional uint32 inlet_box_current = 100;
  optional uint32 reason_of_stop_dischar_ack = 101;
  optional uint32 reason_os_stop_charge_ack = 102;
  optional uint32 reconfig_flag = 103;
  optional uint32 phase_sub_value = 104;
  optional uint32 req_clear_data = 110;
  optional uint32 ack_clear_data = 111;
  optional uint32 clear_data_fail_sta = 112;
}

message BackupProtoTime {
  optional .pd303.BackupTimeInfo backup_info = 1;
}

message LoadSafeDataTime {
  optional float load_vol_L1_time = 1;
  optional float load_vol_L2_time = 2;
  optional uint32 load_phase_diff_time = 3;
}

message LoadProtoTime {
  optional .pd303.LoadTimeInfo load_info = 1;
  optional .pd303.LoadSafeDataTime load_safe_time = 2;
}

message LoadHeartBeatTime {
  optional uint32 time_stamp = 1;
}

message BackHeartTime {
  optional uint32 time_stamp = 1;
}

message MasterToBackHeartBeatTime {
  optional uint32 time_stamp = 1;
  optional .pd303.GRID_STATUS grid_status = 2;
  optional uint32 error_state = 3;
  optional uint32 phase_sub_value = 4;
}

message MasterToLoadHeartTime {
  optional uint32 time_stamp = 1;
}

message MasterToBackProtoPushAndSet {
  optional uint32 grid_vol = 1;
  optional uint32 grid_freq = 2;
  optional bool stop_key_status = 3;
  optional .pd303.GRID_STATUS grid_status = 4;
  optional bool is_area_err = 5;
  optional uint32 master_to_back_time_stamp = 6;
  optional bool is_get_backup_info = 7;
  optional uint32 open_door_flag = 8;
  optional uint32 overall_err_sta = 9;
  optional .pd303.BackupChargeCfg ch1_charge_cfg = 10;
  optional .pd303.BackupChargeCfg ch2_charge_cfg = 11;
  optional .pd303.BackupChargeCfg ch3_charge_cfg = 12;
  optional uint32 ch1_enable_set = 13;
  optional uint32 ch2_enable_set = 14;
  optional uint32 ch3_enable_set = 15;
  optional .pd303.BackupDischargeCfg ch1_discharge_cfg = 30;
  optional .pd303.BackupDischargeCfg ch2_discharge_cfg = 31;
  optional .pd303.BackupDischargeCfg ch3_discharge_cfg = 32;
  optional float overall_load_pwr = 33;
  optional float overall_load_pwr_L2 = 34;
  optional .pd303.FORCE_CHARGE_STA ch1_force_charge = 50;
  optional .pd303.FORCE_CHARGE_STA ch2_force_charge = 51;
  optional .pd303.FORCE_CHARGE_STA ch3_force_charge = 52;
  optional .pd303.ModelInfo mc_model_info = 70;
}

message BackToMasterProtoPush {
  optional uint32 max_power = 1;
  optional uint32 output_power = 2;
  optional .pd303.BackupIncreInfo backup_incre_info = 3;
  optional .pd303.BACKUP_CH_STA backup_sys_sta = 4;
  optional uint32 back_to_master_time_stamp = 5;
  optional bool get_master_init_sta = 6;
  optional float backup_vol_L1 = 7;
  optional float backup_vol_L2 = 8;
  optional float backup_watt_L1 = 9;
  optional float backup_watt_L2 = 10;
  optional uint32 backup_phase_diff = 11;
  optional float ch1_vol_L1 = 12;
  optional float ch1_vol_L2 = 13;
  optional float ch2_vol_L1 = 14;
  optional float ch2_vol_L2 = 15;
  optional float ch3_vol_L1 = 16;
  optional float ch3_vol_L2 = 17;
  optional uint32 discharge_AC_out_sta = 20;
  optional uint32 rly_s3_sta = 21;
  optional uint32 dev_charge_err_sta = 22;
}

message MasterToLoadInfo {
  optional .pd303.LoadChInfo ch1_info = 30;
  optional .pd303.LoadChInfo ch2_info = 31;
  optional .pd303.LoadChInfo ch3_info = 32;
  optional .pd303.LoadChInfo ch4_info = 33;
  optional .pd303.LoadChInfo ch5_info = 34;
  optional .pd303.LoadChInfo ch6_info = 35;
  optional .pd303.LoadChInfo ch7_info = 36;
  optional .pd303.LoadChInfo ch8_info = 37;
  optional .pd303.LoadChInfo ch9_info = 38;
  optional .pd303.LoadChInfo ch10_info = 39;
  optional .pd303.LoadChInfo ch11_info = 40;
  optional .pd303.LoadChInfo ch12_info = 41;
  optional .pd303.LoadChSta ch1_sta = 90;
  optional .pd303.LoadChSta ch2_sta = 91;
  optional .pd303.LoadChSta ch3_sta = 92;
  optional .pd303.LoadChSta ch4_sta = 93;
  optional .pd303.LoadChSta ch5_sta = 94;
  optional .pd303.LoadChSta ch6_sta = 95;
  optional .pd303.LoadChSta ch7_sta = 96;
  optional .pd303.LoadChSta ch8_sta = 97;
  optional .pd303.LoadChSta ch9_sta = 98;
  optional .pd303.LoadChSta ch10_sta = 99;
  optional .pd303.LoadChSta ch11_sta = 100;
  optional .pd303.LoadChSta ch12_sta = 101;
  optional .pd303.StrategyChInfo ch1_stra_info = 160;
  optional .pd303.StrategyChInfo ch2_stra_info = 161;
  optional .pd303.StrategyChInfo ch3_stra_info = 162;
  optional .pd303.StrategyChInfo ch4_stra_info = 163;
  optional .pd303.StrategyChInfo ch5_stra_info = 164;
  optional .pd303.StrategyChInfo ch6_stra_info = 165;
  optional .pd303.StrategyChInfo ch7_stra_info = 166;
  optional .pd303.StrategyChInfo ch8_stra_info = 167;
  optional .pd303.StrategyChInfo ch9_stra_info = 168;
  optional .pd303.StrategyChInfo ch10_stra_info = 169;
  optional .pd303.StrategyChInfo ch11_stra_info = 170;
  optional .pd303.StrategyChInfo ch12_stra_info = 171;
  optional .pd303.StrategyChInfo ch1_oil_info = 210;
  optional .pd303.StrategyChInfo ch2_oil_info = 211;
  optional .pd303.StrategyChInfo ch3_oil_info = 212;
  optional .pd303.StrategyChInfo ch4_oil_info = 213;
  optional .pd303.StrategyChInfo ch5_oil_info = 214;
  optional .pd303.StrategyChInfo ch6_oil_info = 215;
  optional .pd303.StrategyChInfo ch7_oil_info = 216;
  optional .pd303.StrategyChInfo ch8_oil_info = 217;
  optional .pd303.StrategyChInfo ch9_oil_info = 218;
  optional .pd303.StrategyChInfo ch10_oil_info = 219;
  optional .pd303.StrategyChInfo ch11_oil_info = 220;
  optional .pd303.StrategyChInfo ch12_oil_info = 221;
}

message MasterToLoadProtoPushAndSet {
  optional uint32 max_power = 1;
  optional uint32 output_power = 2;
  optional bool stop_key_statu = 3;
  optional .pd303.POWER_STA power_sta = 4;
  optional uint32 master_to_load_time_stamp = 5;
  optional bool get_load_init_sta = 6;
  optional uint32 grid_vol = 7;
  optional uint32 grid_freq = 8;
  optional float backup_discharge_rmain_bat_cap = 9;
  optional uint32 mid_priority_ch_discharge_low = 10;
  optional float cur_discharge_soc = 11;
  optional float ntc_value_1 = 12;
  optional float ntc_value_2 = 13;
  optional uint32 oil_output_max_power = 14;
  optional .pd303.OIL_POWER_STA oil_power_sta = 15;
  optional .pd303.MasterToLoadInfo hall1_incre_info = 30;
}

message LoadtToMasterInfo {
  optional .pd303.ErrCode errcode = 1;
  optional .pd303.ModelInfo model_info = 2;
  optional uint32 board_ntc_temp = 3;
  optional uint32 load_to_master_time_stamp = 4;
  optional bool is_get_master_info = 5;
  optional uint32 mid_prority_discharge_time = 6;
  optional uint32 high_prority_discharge_time = 7;
  optional uint32 all_load_ch_close_flag = 8;
  optional .pd303.LoadChSta load_ch1_sta = 20;
  optional .pd303.LoadChSta load_ch2_sta = 21;
  optional .pd303.LoadChSta load_ch3_sta = 22;
  optional .pd303.LoadChSta load_ch4_sta = 23;
  optional .pd303.LoadChSta load_ch5_sta = 24;
  optional .pd303.LoadChSta load_ch6_sta = 25;
  optional .pd303.LoadChSta load_ch7_sta = 26;
  optional .pd303.LoadChSta load_ch8_sta = 27;
  optional .pd303.LoadChSta load_ch9_sta = 28;
  optional .pd303.LoadChSta load_ch10_sta = 29;
  optional .pd303.LoadChSta load_ch11_sta = 30;
  optional .pd303.LoadChSta load_ch12_sta = 31;
}

message LoadtToMasterProtoPushAndSet {
  optional .pd303.LoadtToMasterInfo load_to_master_info1 = 30;
  optional float load_vol_L1 = 33;
  optional float load_vol_L2 = 34;
  optional uint32 load_phase_diff = 35;
}

message LoadtToBackupProtoPushAndSet {
  optional float L1_watt = 1;
  optional float L2_watt = 2;
}

message ChInfo {
  optional uint32 ch_watt = 1;
  optional uint32 load_priority = 2;
}

message BroadCastLoadInfo {
  optional uint32 can_adrr = 1;
  repeated .pd303.ChInfo ch_info = 2;
}

message sys_info_param_save {
  optional uint32 grid_vol = 1;
  optional uint32 grid_freq = 2;
  optional .pd303.PRODUCT_TYPE product_tpye = 3;
  optional bool eps_mode_info = 4;
  optional uint32 foce_charge_hight = 5;
  optional uint32 charge_watt_power = 6;
  optional uint32 disc_lower = 7;
  optional bool is_set_oil_engine = 8;
  optional uint32 oil_engine_watt = 9;
  optional uint32 master_cur = 10;
  optional bool has_config_done = 11;
  optional string area = 12;
  optional bool storm_is_enable = 21;
  optional uint32 storm_end_timestamp = 22;
  optional bool in_storm_mode = 23;
  optional uint32 mid_priority_ch_discharge_low = 24;
  optional uint32 oil_engine_to_back_charge_persent = 28;
  optional uint32 ntc_over_temp_err = 29;
  optional uint32 master_rly1_cnt = 13;
  optional uint32 master_rly2_cnt = 14;
  optional uint32 master_rly3_cnt = 15;
  optional uint32 master_rly4_cnt = 16;
  optional float g_i_coeff = 30;
  optional float g_i_offset = 31;
  optional float g_p_coeff = 32;
  optional float g_p_offset = 33;
  optional float g_p_coeff_1 = 34;
  optional float g_p_offset_1 = 35;
  optional float g_p_coeff_2 = 36;
  optional float g_p_offset_2 = 37;
  optional float g_p_coeff_1_2 = 38;
  optional float g_p_offset_1_2 = 39;
  optional uint32 smart_backup_mode = 61;
  optional uint32 backup_reserve_enable = 62;
  optional uint32 backup_reserve_soc = 63;
  optional uint32 solar_backup_reserve_soc = 64;
  optional uint32 oil_type = 70;
  optional uint32 oil_max_output_watt = 71;
  optional uint32 storm_cur_time_stop_flag = 80;
  optional sint32 sys_timezone = 90;
  optional uint32 time_type = 91;
  optional string timezone_id = 92;
  optional uint32 update_flag = 93;
  optional uint32 inlet_box_current = 94;
  optional uint32 phase_sub_value = 95;
  optional uint32 ack_clear_data = 96;
}

message strategy_param_save {
  optional .pd303.EmergencyStrategy LoadStrategyCfg = 30;
  optional .pd303.TimeTaskCfg TimeTaskCfg_1 = 31;
  optional .pd303.TimeTaskCfg TimeTaskCfg_2 = 32;
  optional .pd303.TimeTaskCfg TimeTaskCfg_3 = 33;
  optional .pd303.TimeTaskCfg TimeTaskCfg_4 = 34;
  optional .pd303.TimeTaskCfg TimeTaskCfg_5 = 35;
  optional .pd303.TimeTaskCfg TimeTaskCfg_6 = 36;
  optional .pd303.TimeTaskCfg TimeTaskCfg_7 = 37;
  optional .pd303.TimeTaskCfg TimeTaskCfg_8 = 38;
  optional .pd303.TimeTaskCfg TimeTaskCfg_9 = 39;
  optional .pd303.TimeTaskCfg TimeTaskCfg_10 = 40;
}

message hall_param {
  optional .pd303.LoadChInfo ch1_info = 30;
  optional .pd303.LoadChInfo ch2_info = 31;
  optional .pd303.LoadChInfo ch3_info = 32;
  optional .pd303.LoadChInfo ch4_info = 33;
  optional .pd303.LoadChInfo ch5_info = 34;
  optional .pd303.LoadChInfo ch6_info = 35;
  optional .pd303.LoadChInfo ch7_info = 36;
  optional .pd303.LoadChInfo ch8_info = 37;
  optional .pd303.LoadChInfo ch9_info = 38;
  optional .pd303.LoadChInfo ch10_info = 39;
  optional .pd303.LoadChInfo ch11_info = 40;
  optional .pd303.LoadChInfo ch12_info = 41;
}

message load_param_save {
  optional .pd303.hall_param hall1_param = 1;
  optional uint32 grid_freq = 2;
}

message backup_chanel_info {
  optional uint32 backup_rly1_cnt = 1;
  optional uint32 backup_rly2_cnt = 2;
  optional uint32 backup_ch_hand_enable_sta = 3;
}

message backup_param_save {
  optional uint32 grid_vol = 1;
  optional uint32 grid_freq = 2;
  optional .pd303.backup_chanel_info backup_chanel1_info = 3;
  optional .pd303.backup_chanel_info backup_chanel2_info = 4;
  optional .pd303.backup_chanel_info backup_chanel3_info = 5;
  optional uint32 phase_diff = 6;
  optional .pd303.BackupDischargeCfg ch1_discharge_cfg = 30;
  optional .pd303.BackupDischargeCfg ch2_discharge_cfg = 31;
  optional .pd303.BackupDischargeCfg ch3_discharge_cfg = 32;
}

message StatisticsItem {
  optional uint32 timestamp = 1;
  optional uint32 time_type = 2;
  optional uint32 data_type = 3;
  repeated sint32 data = 4;
}

message StatisticsTotalReport {
  optional uint32 item_seq = 1;
  repeated .pd303.StatisticsItem item_data = 2;
}

message StatisticsTotalReportAck {
  optional uint32 result = 1;
  optional uint32 item_seq = 2;
  optional uint32 time_type = 3;
  optional uint32 data_type = 4;
}

message StatisticsRptCtrlSet {
  optional uint32 time_type = 1;
  optional uint32 data_type = 2;
  optional uint32 sys_rate_ctrl_time = 3;
}

message StatisticsRptCtrlSetAck {
  optional uint32 result = 1;
  optional uint32 time_type = 2;
  optional uint32 data_type = 3;
}
